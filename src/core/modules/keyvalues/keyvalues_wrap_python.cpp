/**
* =============================================================================
* Source Python
* Copyright (C) 2012 Source Python Development Team.  All rights reserved.
* =============================================================================
*
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU General Public License, version 3.0, as published by the
* Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU General Public License along with
* this program.  If not, see <http://www.gnu.org/licenses/>.
*
* As a special exception, the Source Python Team gives you permission
* to link the code of this program (as well as its derivative works) to
* "Half-Life 2," the "Source Engine," and any Game MODs that run on software
* by the Valve Corporation.  You must obey the GNU General Public License in
* all respects for all other code used.  Additionally, the Source.Python
* Development Team grants this exception to all derivative works.
*/

//---------------------------------------------------------------------------------
// Includes
//---------------------------------------------------------------------------------
#include "keyvalues_wrap.h"
#include "modules/export_main.h"

//---------------------------------------------------------------------------------
// Namespaces to use.
//---------------------------------------------------------------------------------
using namespace boost::python;

//---------------------------------------------------------------------------------
// Class method overloads.
//---------------------------------------------------------------------------------
DECLARE_CLASS_METHOD_OVERLOAD(CKeyValues, find_key, 1, 2);
DECLARE_CLASS_METHOD_OVERLOAD(CKeyValues, get_int, 1, 2);
DECLARE_CLASS_METHOD_OVERLOAD(CKeyValues, get_uint64, 1, 2);
DECLARE_CLASS_METHOD_OVERLOAD(CKeyValues, get_float, 1, 2);
DECLARE_CLASS_METHOD_OVERLOAD(CKeyValues, get_string, 1, 2);
DECLARE_CLASS_METHOD_OVERLOAD(CKeyValues, get_bool, 1, 2);
DECLARE_CLASS_METHOD_OVERLOAD(CKeyValues, is_empty, 0, 1);

//---------------------------------------------------------------------------------
// Exposer functions.
//---------------------------------------------------------------------------------
extern void export_keyvalues();

//---------------------------------------------------------------------------------
// Keyvalues module definition.
//---------------------------------------------------------------------------------
DECLARE_SP_MODULE(keyvalues_c)
{
	export_keyvalues();
}

//---------------------------------------------------------------------------------
// Exposes KeyValues functionality.
//---------------------------------------------------------------------------------
void export_keyvalues()
{
	BOOST_CLASS_CONSTRUCTOR( CKeyValues, const char* )
		
		CLASS_METHOD(CKeyValues,
			get_name,
			"Returns the name of the keyvalues object."
		)

		CLASS_METHOD(CKeyValues,
			set_name,
			"Sets the name of the keyvalues object.",
			args("name")
		)

		CLASS_METHOD(CKeyValues,
			get_name_symbol,
			"Gets the name as a unique integer."
		)

		CLASS_METHOD(CKeyValues,
			uses_escape_sequences,
			"Sets whether or not this keyvalues object uses escape sequences.",
			args("uses_escape_sequences")
		)

		CLASS_METHOD(CKeyValues,
			load_from_file,
			"Loads KeyValues data from a file into this CKeyValues instance.",
			args("file_name")
		)

		CLASS_METHOD(CKeyValues,
			save_to_file,
			"Saves the data in this CKeyValues instance to the given file path.",
			args("file_name")
		)

		CLASS_METHOD_OVERLOAD_RET(CKeyValues,
			find_key,
			"Finds a KeyValue. Creates it if create_key is set.",
			args("key_name", "create_key"),
			manage_new_object_policy()
		)

		CLASS_METHOD(CKeyValues,
			find_key_by_symbol,
			"Finds a subkey by an integer identifier.",
			args("key"),
			manage_new_object_policy()
		)

		CLASS_METHOD(CKeyValues,
			create_new_key,
			"Creates a new child key with an autogenerated name. The name is guaranteed to be\
			an integer, of value 1 higher than the highest other integer key name.",
			manage_new_object_policy()
		)

		CLASS_METHOD(CKeyValues,
			add_sub_key,
			"Adds a sub key. Make sure the subkey isn't a child of some other KeyValues.",
			args("sub_key")
		)

		CLASS_METHOD(CKeyValues,
			remove_sub_key,
			"Removes a subkey from the list. DOES NOT DELETE IT!",
			args("sub_key")
		)

		CLASS_METHOD(CKeyValues,
			get_first_sub_key,
			"Returns the first subkey in the list. Will iterate over the keys AND the\
			values.",
			manage_new_object_policy()
		)

		CLASS_METHOD(CKeyValues,
			get_next_key,
			"Returns the next subkey. Will iterate the keys AND the values.",
			manage_new_object_policy()
		)

		CLASS_METHOD(CKeyValues,
			get_first_true_sub_key,
			"Returns the first subkey (both key and value).",
			manage_new_object_policy()
		)

		CLASS_METHOD(CKeyValues,
			get_next_true_sub_key,
			"Returns the next subkey (both key and value).",
			manage_new_object_policy()
		)

		CLASS_METHOD(CKeyValues,
			get_first_value,
			"Returns the first value in the tree.",
			manage_new_object_policy()
		)

		CLASS_METHOD(CKeyValues,
			get_next_value,
			"Returns the next value in the tree.",
			manage_new_object_policy()
		)

		CLASS_METHOD_OVERLOAD(CKeyValues,
			get_int,
			"Returns the integer value for the given key name.",
			args("key_name", "default_value")
		)

		CLASS_METHOD_OVERLOAD(CKeyValues,
			get_uint64,
			"Gets the 64-bit integer value for the given key name.",
			args("key_name", "default_value")
		)

		CLASS_METHOD_OVERLOAD(CKeyValues,
			get_float,
			"Returns the floating point value for the given key name.",
			args("key_name", "default_value")
		)

		CLASS_METHOD_OVERLOAD(CKeyValues,
			get_string,
			"Returns the string value for the given key name.",
			args("key_name", "default_value")
		)

		CLASS_METHOD_OVERLOAD(CKeyValues,
			get_bool,
			"Returns the boolean value for the given key name.",
			args("key_name", "default_value")
		)

		CLASS_METHOD_OVERLOAD(CKeyValues,
			is_empty,
			"Returns true if this key or the given key is empty.",
			args("key_name")
		)
		
		CLASS_METHOD(CKeyValues,
			set_string,
			"Sets the given key's string value.",
			args("key_name", "value")
		)

		CLASS_METHOD(CKeyValues,
			set_int,
			"Sets the given key's integer value.",
			args("key_name", "value")
		)

		CLASS_METHOD(CKeyValues,
			set_uint64,
			"Sets the given key's 64-bit integer value.",
			args("key_name", "value")
		)

		CLASS_METHOD(CKeyValues,
			set_float,
			"Sets the given key's floating point value.",
			args("key_name", "value")
		)

		CLASS_METHOD(CKeyValues,
			set_bool,
			"Sets the given key's boolean value.",
			args("key_name", "value")
		)

	BOOST_END_CLASS()
}

